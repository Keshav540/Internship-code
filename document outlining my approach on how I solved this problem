**Approach to Building the SHL Assessment Recommendation System**

**Objective**  
Design and deploy a web application that ingests a natural language query or job description URL and recommends up to 10 relevant SHL assessments, displaying each recommendation’s name, link, remote‑testing support, adaptive/IRT support, duration, and test time.

---

1. **Data Acquisition & Parsing**  
   - **Scraping**: Used `requests` to fetch the SHL product catalog page.  
   - **HTML Parsing**: Employed **BeautifulSoup** to locate product containers (`div.custom__table-responsive`), extract assessment names, URLs, and raw text.
   - **Attribute Extraction**: Applied simple keyword checks and **regex** patterns to derive “Remote Testing Support”, “Adaptive/IRT Support”, “Duration”, and “Test Time” from the tile text.  
   - **Fallbacks & Robustness**: Added alternative selectors and default values (“Not provided”) to handle missing or changed HTML structures.

2. **Data Representation**  
   - Compiled extracted data into a **Pandas DataFrame** with columns:  
     `Assessment Name`, `URL`, `Remote Testing Support`, `Adaptive/IRT Support`, `Duration`, `Test Time`.

3. **Recommendation Engine**  
   - **Text Vectorization**: Utilized **scikit‑learn**’s `TfidfVectorizer` (with English stop‑words) to transform the user query and each assessment description into TF‑IDF vectors.  
   - **Similarity Computation**: Calculated pairwise **cosine similarity** between the query vector and assessment vectors.  
   - **Ranking**: Sorted assessments by descending similarity score and selected the top **N** (default 10).  

4. **Web Application (Demo)**  
   - Framework: **Streamlit** for rapid, low‑code UI development.  
   - Interface: Radio buttons to choose “Enter Text” or “Enter URL”, text area or URL input, and a results table.  
   - Presentation: Rendered recommendations as an HTML table with clickable assessment names and visible support, duration, and test‑time columns.


**Tools & Libraries**  
- **Python 3.7+**  
- **requests**, **BeautifulSoup4** (web scraping)  
- **re** (regex extraction)  
- **Pandas** (data handling)  
- **scikit‑learn** (TF‑IDF, cosine similarity)  
- **Streamlit** (web UI)
- **json**
