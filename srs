**Approach to Building the SHL Assessment Recommendation System**

**Objective**  
Design a web application that ingests a natural language query or job description URL, scrapes the SHL product catalog in real‑time, and recommends up to 10 relevant SHL assessments. Each recommendation displays the assessment name, a clickable link, remote‑testing support, and adaptive/IRT support.

---

**1. Data Acquisition & Parsing**  
- **Scraping Method**:  
  - Utilize the `requests` library to fetch the product catalog from [https://www.shl.com/solutions/products/product-catalog/](https://www.shl.com/solutions/products/product-catalog/).
  - Parse the HTML content with **BeautifulSoup**.
- **HTML Structure**:  
  - Scan the document for `<tr>` tags which contain product data.
  - Search for an anchor (`<a>`) element within each table row with an `href` attribute.  
- **Attribute Extraction**:  
  - Extract assessment name using `anchor.get_text(strip=True)` and URL from `anchor["href"]`.  
  - Handle relative URLs by prefixing with `https://www.shl.com` if necessary.
  - Derive support flags (Remote Testing Support and Adaptive/IRT Support) through keyword searches in the tile’s text.
- **Robustness**:  
  - If no anchor is found, default to `"Unknown"` for the name and `"#"` for the URL.
  - Store the scraped data as a **Pandas DataFrame** for further processing.

---

**2. Data Representation**  
- The data is structured in a DataFrame with these columns:
  - `Assessment Name`
  - `URL`
  - `Remote Testing Support`
  - `Adaptive/IRT Support`
- This tabular format allows easy filtering, ranking, and presentation.

---

**3. Recommendation Engine**  
- **TF‑IDF Vectorization**:  
  - Utilize **scikit‑learn**’s `TfidfVectorizer` (with English stop‑words) applied on the assessment names to create feature vectors.
  - Pre‐fit the vectorizer on the fixed set of assessment names (from the DataFrame) to build a consistent vocabulary.
- **Similarity Measurement**:  
  - Transform the user’s query into the same vector space.
  - Compute **cosine similarity** between the query vector and each assessment’s vector.
- **Ranking & Output**:  
  - Sort and select the top 10 (or `top_n`) assessments based on similarity scores.
  - Return the final results with an added score column to indicate relevance.

---

**4. Web Application**  
- **Framework**:  
  - Developed using **Streamlit** for rapid UI development.
- **Input Options**:  
  - Users can either type in a query or provide a URL from which text is extracted.
- **User Interface**:  
  - The application displays recommendations in a user-friendly HTML table with clickable assessment names.
- **Code Cleanliness**:  
  - Removed JSON output and download functionality to focus on a clean, human‑friendly UI.

---

**5. Evaluation & Future Enhancements**  
- **Current Limitations**:  
  - The recommendation engine currently uses only the assessment name. Enriching the text corpus (e.g., by adding assessment descriptions) could improve matching.
- **Potential Improvements**:  
  - Integrate advanced semantic methods (e.g., sentence embeddings) for deeper query understanding.
  - Combine content‑based filtering with collaborative techniques.
  - Implement caching, logging, and better error handling for production deployment.
  - Deploy using platforms like **Streamlit Cloud** or containerize with **Docker**.

---

**Tools & Libraries**  
- **Python 3.x**  
- **requests**, **BeautifulSoup4** (for web scraping)  
- **Pandas** (for data handling)  
- **scikit‑learn** (for TF‑IDF vectorization and cosine similarity)  
- **Streamlit** (for the web UI)

